generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NEXT_PUBLIC_DATABASE_URL")
  directUrl = env("NEXT_PUBLIC_DIRECT_URL")
}

model User {
  id          BigInt    @id @default(autoincrement())
  authId      String    @unique @map("auth_id")
  username    String
  avatar      String?
  twitterUrl  String?   @map("twitter_url")
  githubUrl   String?   @map("github_url")
  description String?
  country     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  videos      Video[]
  likes       Like[]
  comments    Comment[]

  @@map("users")
}

model Video {
  id            BigInt            @id @default(autoincrement())
  userId        BigInt            @map("user_id")
  title         String
  description   String?
  videoUrl      String            @map("video_url")
  manimUrl      String?           @map("manim_url")
  thumbnailUrl  String?           @map("thumbnail_url")
  views         BigInt            @default(0)
  articleUrl    String?           @map("article_url")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  user          User              @relation(fields: [userId], references: [id])
  likes         Like[]
  comments      Comment[]
  videoTags     VideoTag[]
  videoReferences VideoReference[]

  @@map("videos")
}

model Like {
  userId    BigInt   @map("user_id")
  videoId   BigInt   @map("video_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@id([userId, videoId])
  @@map("likes")
}

model Comment {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  videoId   BigInt   @map("video_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@map("comments")
}

model Tag {
  id        BigInt     @id @default(autoincrement())
  name      String
  videoTags VideoTag[]

  @@map("tags")
}

model VideoTag {
  videoId   BigInt   @map("video_id")
  tagId     BigInt   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  video     Video    @relation(fields: [videoId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([videoId, tagId])
  @@map("video_tags")
}

model ReferenceItem {
  id               BigInt            @id @default(autoincrement())
  title            String
  url              String
  createdAt        DateTime          @default(now()) @map("created_at")
  videoReferences  VideoReference[]

  @@map("reference_items")
}

model VideoReference {
  videoId     BigInt        @map("video_id")
  referenceId BigInt        @map("reference_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  video       Video         @relation(fields: [videoId], references: [id])
  reference   ReferenceItem @relation(fields: [referenceId], references: [id])

  @@id([videoId, referenceId])
  @@map("video_references")
}